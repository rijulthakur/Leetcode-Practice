class Solution {
    public int mini(int[][] A, int i, int j){
        int a = (j > 0 ) ? A[i-1][j-1] : Integer.MAX_VALUE; 
        int b = A[i-1][j]; 
        int c = (j < A.length-1) ? A[i-1][j+1] : Integer.MAX_VALUE; 
        return Math.min(a, Math.min(b,c)); 
    }
    public int minFallingPathSum(int[][] matrix) {
        int n = matrix.length; 
        int[][] dp = new int[n][n]; 
        for(int i = 0; i < n; ++i ) 
          dp[0][i] = matrix[0][i]; 
        for(int i = 1; i < n; ++i){
            for(int j = 0; j < n; ++j){
                dp[i][j] = matrix[i][j] + mini(dp, i, j);
            }
        }
        int min = Integer.MAX_VALUE; 
        for(int i = 0; i < n ; ++i) min = Math.min(min, dp[n-1][i]);
        return min; 
    }
}
